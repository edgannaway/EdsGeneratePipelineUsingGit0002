#!/usr/bin/env groovy
import hudson.model.*
import hudson.EnvVars
import groovy.json.JsonSlurperClassic
import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import java.net.URL
echo "EdsGeneratePipeline Version 0005"
echo "The ISPW Stream being used is: ${ISPW_Stream}"
echo "The ISPW Application being used is: ${ISPW_Application}"
echo "The ISPW Container being used is: ${ISPW_Container}"
echo "The ISPW Level being used is: ${ISPW_Level}"
echo "The ISPW SetID being used is: ${ISPW_SetId}"
echo "The ISPW Release being used is: ${ISPW_Release}"
echo "The ISPW Event being used is: ${ISPW_Event}"

//  

// Jenkins credential ID and CES Personal Access token to be used for mainframe access
String Jenkins_Id        = "hdaelg0"      //Id that was created in Jenkins
String CES_Token         = "8ade625f-07a2-4be6-a9f8-0653c5969d07"   // Ed's CES Token using hdaelg0

//Compuware Envirnoment to connect
String HCI_Connection     = "cwcc:16196"
String CES_Connection     = "cwcc:2020" 

// SonarQube ID used for both project key and project name
String SQ_Project         = "EdsPipeline0002"  

// ISPW Levels and container to be used by the promote/deploy/generate/regress operations
// String ISPW_Container     = Parm_ISPW_Container    //ContainerID
// String ISPW_ContainerType = "assignments"   //Valid values are assignments or releases
// String ISPW_Stream        = Parm_ISPW_Stream
// String ISPW_Application   = Parm_ISPW_Application
// String ISPW_RuntimeConfig = Parm_ISPW_RuntimeConfig
// String ISPW_Dev_Level     = Parm_ISPW_Dev_Level
// String ISPW_Stg_Level     = Parm_ISPW_Stg_Level

String ISPW_Container     = "ELG1000017"    //ContainerID
String ISPW_ContainerType = "assignments"   //Valid values are assignments or releases
//String ISPW_Stream        = Parm_ISPW_Stream
String ISPW_Application   = "ELG1000004"
//String ISPW_RuntimeConfig = Parm_ISPW_RuntimeConfig
//String ISPW_Dev_Level     = Parm_ISPW_Dev_Level
//String ISPW_Stg_Level     = Parm_ISPW_Stg_Level

// Start of Import from EdsGoldPipelinePromoteFromFIX
//COmpuware Envirnoment to connect
// Already Defined String HCI_Connection     = "cwcc:16196"
// Already Defined String CES_Connection     = "cwcc:2020"       

// Jenkins credential ID and CES Personal Access token to be used for mainframe access
// Already Defined String Jenkins_Id        = "hdaelg0"      //Id that was created in Jenkins
// Already Defined String CES_Token         = "8ade625f-07a2-4be6-a9f8-0653c5969d07"   // Ed's CES Token using hdaelg0

// ISPW Levels and container to be used by the promote/deploy/generate/regress operations
// Already Defined String ISPW_Container     = "GOLD000074"    //ContainerID
// Already Defined String ISPW_ContainerType = "assignments"   //Valid values are assignments or releases
String ISPW_Stream        = "POV"
// Already Defined String ISPW_Application   = "GOLD"
String ISPW_RuntimeConfig = "ISPW"
String ISPW_Dev_Level     = "EMER"
String ISPW_Stg_Level     = "EMER"
String ISPW_Stg_Level1     = "FIX"
//String ISPW_Token_Test    = "91bae501-8b4d-4155-909d-2ad5aa9f3131"
String ISPW_Token_Test    = "f06cbdf8-5273-4664-8c54-1dc21cc8f3d9"

// Directories for source and tests that are downloaded to the jenkins workspace
String MF_Source          = ""        //future use
String TTT_Project        = "EGDEMO0004"       // Need to update later ed          

// Total Test JCL and Scenario/Testsuite used in CI process
String TTT_TestPackage    = "CWXTCB45_Scenario"
String TTT_PackageType    = ".testscenario"
String TTT_Jcl            = "Runner.jcl"
String CC_repository      = "HDAELG0.LIVE.DEMO.COBOL5.ESS.CODE.COVERAGE"

// SonarQube ID used for both project key and project name
// Already Defined String SQ_Project         = "EdsGoldPipelinePromoteFromFIX"                                

// XL Release values
String XLR_Template       = "Ed/Release from Jenkins (Ed)" // XL Release template to invoke at the end of the Jenkins workflow
String XLR_User	          = "hdaelg0"					      // XL Release user ID
String XLR_Release        = "EGDEMO0004"            // ISPW Release ID

// End of Import from EdsGoldPipelinePromoteFromFIX

stage('Download Code From ISPW')
{
    node{
    checkout([$class: 'IspwContainerConfiguration', 
        componentType: 'COB', 
        connectionId: '91bae501-8b4d-4155-909d-2ad5aa9f3131', 
        containerName: "${ISPW_Container}",       // "ELG1000017"
//        containerName: 'ELG1000017', 
        containerType: '0', 
        credentialsId: 'hdaelg0', 
        ispwDownloadAll: true, 
        serverConfig: '', 
        serverLevel: 'FIX'])
    }
}

stage('TTT Project Checkout from Git')
{
    // C:\Users\pfhsxk0\.jenkins\workspace\Eds Pipeline 0002 # 
    node{
        checkout changelog: false, 
        poll: false, 
        scm: 
        [
            $class: 'GitSCM', 
            branches: [[name: '*/master']], 
            doGenerateSubmoduleConfigurations: false, 
            extensions: [], 
            submoduleCfg: [], 
            userRemoteConfigs: 
                [
                    [
                        credentialsId: 'SharkWorks1_Github', 
                        name: 'origin', 
                        url: 'https://github.com/SharkWorks1/EdsFixPipeline0001.git'
                    ]
                ]
        ]
    }
}
 
stage('Run TTT Unit Test With Code Coverage')
{
    node{
        step([$class: 'TotalTestBuilder', 
        ccRepo: 'SALESSUP.ELG1.DEV1.CODE.COVERAGE', 
        ccSystem: 'CWE-142758', 
        ccTestId: 'CWE-142758',
        connectionId: '196de681-04d7-4170-824f-09a5457c5cda', 
        credentialsId: 'hdaelg0', 
        hlq: '', 
        ccClearStats: true,
        jcl: 'Runner.jcl', 
        projectFolder: 'EdsFixPipeline0001', 
        testSuite: 'CWXTCOB_Scenario.testscenario'])        
    }
}

stage('Retrieve Code Coverage Results')
{
    node{
        step([$class: 'CodeCoverageBuilder', analysisProperties: '''cc.sources=ELG1
        cc.repos=SALESSUP.ELG1.DEV1.CODE.COVERAGE
        cc.system=CWE-142758
        cc.test=CWE-142758
        cc.ddio.overrides=''', analysisPropertiesPath: '', connectionId: '196de681-04d7-4170-824f-09a5457c5cda', credentialsId: 'hdaelg0'])            
    }
}

stage("Load into SonarQube and Check SonarQube Quality Gate")
{
    node{
        // Requires SonarQube Scanner 2.8+
        def scannerHome = tool 'scanner';
        withSonarQubeEnv('localhost') 
        {
            // Run SonarQube Scanner 
            def SQ_Tests                = " -Dsonar.coverageReportPaths=Coverage/CodeCoverage.xml"
            def SQ_ProjectKey           = " -Dsonar.projectKey=EdsFixPipelineProject -Dsonar.projectName=EdsFixPipelineProject -Dsonar.projectVersion=1.0"
            def SQ_Source               = " -Dsonar.sources=ELG1\\MF_Source"
            def SQ_Copybook             = " -Dsonar.cobol.copy.directories=ELG1\\MF_Source"
            def SQ_Cobol_conf           = " -Dsonar.cobol.file.suffixes=cbl,testsuite,testscenario,stub,cpy -Dsonar.cobol.copy.suffixes=cpy -Dsonar.sourceEncoding=UTF-8"
           // bat "${scannerHome}/bin/sonar-scanner" + SQ_Tests + SQ_ProjectKey + SQ_Source + SQ_Cobol_conf
            bat "${scannerHome}/bin/sonar-scanner" + SQ_Tests + SQ_ProjectKey + SQ_Source + SQ_Copybook + SQ_Cobol_conf
        }
        // Wait for the results of the SonarQube Quality Gate
        timeout(time: 2, unit: 'MINUTES') {

            // Wait for webhook call back from SonarQube.  SonarQube webhook for callback to Jenkins must be configured on the SonarQube server.
            def qg = waitForQualityGate()

            // Evaluate the status of the Quality Gate
            if (qg.status != 'OK')
            {
                echo "Pipeline aborted due to quality gate failure: ${qg.status}"
                error "Exiting Pipeline" // Exit the pipeline with an error if the SonarQube Quality Gate is failing
            }
    }
}
